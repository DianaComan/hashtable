#######################################################################
Nume: Coman Diana Stefania
Grupa: 335CA
Tema: Tema3ASC, Hashtable
Dificultate: Medie
#######################################################################

Implementare Hashtable

Am folosit linear probing pentru implementarea hashtable, fiecare cheie
avand o valoare unica care ii apartine. Am folosit o functie de hash 
care incearca sa obtina chei cat mai distinte pentru a evita coliziunile

Astfel la inserare, se calculeaza hash-ul cheii. Daca pozitia este 
libera, se va insera acolo valoarea, daca nu, se aduna 1 pana se gaseste 
o cheie libera. Daca se ajunge la dimensiunea maxima a hashtable-ului, 
se va cauta un loc liber si de la 0 la functia hash.
Cautarea unei chei se va realiza asemanator, se obtine hash-ul cheii, si 
apoi se va cauta cheia de acea valoare. 

Am ales sa mentin loadfactorul intre 80% si 94%. Tabela se va restrunctura 
cand se trece de pragul maxim prin functia reshape. Aceasta aloca o noua
tabela suficient de mare cat sa scada loadfactorul la 80%. Se copiaza 
toate intrarile din vechea tabela in noua tabela cu kernelul reshape_hashT 
si se elibereaza vechea tabela din device. Aceasta are un principiu 
asemanator cu insert si get, se obtine hashul, se cauta perechea si se 
insereaza in noul hashtable.
##########################################################################

Stocare Hashtable in memoria GPU VRAM

Pentru a stoca hashtable-ul am folosit structura hashTable. Ea retine
dimensiunea tabelei (size) și un pointer (pairs) la un vector în care se pot
introduce perechi pair (key, value).
Hashtable-ul e stocat în VRAM, avand in RAM doar pointerul din
structura catre zona de memorie din device unde este stocată tabela.

##########################################################################

Output obtinut

Pentru testare am folosit coada hp-sl.q.
Output-ul obținut la rularea time python bench.py:

[diana.coman2301@hpsl-wn01 t2]$ time python bench.py
-------------- Test T1 --------------
OK       +10 pts         HASH_BATCH_INSERT, 1000000, 100, 80
OK       +10 pts         HASH_BATCH_GET, 1000000, inf, 80.0051
TOTAL    +20 pts

-------------- Test T2 --------------
OK       +5 pts  HASH_BATCH_INSERT, 2000000, 200, 80
OK       +5 pts  HASH_BATCH_GET, 2000000, 100, 80.0026
TOTAL    +10 pts

-------------- Test T3 --------------
OK       +5 pts  HASH_BATCH_INSERT, 2000000, 66.6667, 80
OK       +5 pts  HASH_BATCH_INSERT, 2000000, 200, 80
OK       +5 pts  HASH_BATCH_GET, 2000000, 100, 80.0013
OK       +5 pts  HASH_BATCH_GET, 2000000, 200, 80.0013
TOTAL    +20 pts

-------------- Test T4 --------------
OK       +5 pts  HASH_BATCH_INSERT, 2500000, 125, 80
OK       +5 pts  HASH_BATCH_INSERT, 2500000, 83.3333, 80
OK       +5 pts  HASH_BATCH_INSERT, 2500000, 62.5, 80
OK       +5 pts  HASH_BATCH_INSERT, 2500000, 83.3333, 80
OK       +5 pts  HASH_BATCH_GET, 2500000, 250, 80.0005
OK       +5 pts  HASH_BATCH_GET, 2500000, 250, 80.0005
OK       +5 pts  HASH_BATCH_GET, 2500000, 250, 80.0005
OK       +5 pts  HASH_BATCH_GET, 2500000, 250, 80.0005
TOTAL    +40 pts


TOTAL gpu_hashtable  90/90

real    0m4.648s
user    0m2.313s
sys     0m2.163s


Performanta e mai buna fata de implementarea secventiala a unordered_map
care durează în total aproximativ 20s pe coada. Acest lucru e datorat
paralelizării operațiilor efectuate asupra tabelei hash (pentru fiecare 
element de inserat sau cautat se folosesc threaduri).

Performanta nu este la fel de mare raportat la numarul de threaduri folosite
Mare parte din timpul implementarii paralele este ocupat de managementul 
memoriei. Alt factor e portiunea neparalela din ambele metode.

Observatie: pentru a rula varianta secventiala trebuie modificat in test_map.cpp
linia 96 in HASH_BATCH_INSERT(vecKeys, vecValues, chunkSizeUpdate);